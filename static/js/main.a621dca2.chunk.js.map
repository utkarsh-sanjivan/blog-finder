{"version":3,"sources":["component/Header/index.js","store/Users/actions.js","store/Users/constants.js","utils/comparisonModule.js","component/TableDetails/index.js","container/PostPage/index.js","container/HomePage/index.js","container/PostDetails/index.js","router.js","utils/axios.js","api/api.blogs.js","store/Users/sagas.js","store/sagas.js","store/Users/reducers.js","store/reducers.js","index.js","store/index.js"],"names":["IssueHeader","props","className","window","location","hash","includes","pathname","getUserList","payload","type","getPostList","getPostDetails","getCommentList","deleteComment","setPageNumber","isObject","object","arrayComparison","arr1","arr2","Array","isArray","length","every","val","index","TableDetails","loading","active","dataSource","description","columns","pagination","PostPage","onHandleChangeTable","filters","sorter","Object","keys","UserActions","current","state","posts","userId","match","params","skip","reset","this","prevProps","userReducer","setState","pageNumber","title","dataIndex","key","render","value","record","onClick","history","push","id","arePostsFetchLoading","onChange","position","defaultPageSize","showSizeChanger","React","PureComponent","connect","store","dispatch","bindActionCreators","HomePage","users","JSON","stringify","company","name","isUserFetchLoading","PostDetails","post","comments","postId","objectComparison","object1","object2","keys1","keys2","val1","val2","areObjects","postDetails","deleteCommentFetchSuccess","isPostDetailsFetchLoading","style","display","danger","body","areCommentsFetchLoading","map","comment","email","Routing","HashRouter","basename","Switch","Route","exact","path","component","instance","axios","create","baseURL","headers","a","get","response","status","data","url","delete","getUserListSaga","getPostListSaga","getPostDetailsSaga","getCommentListSaga","deleteCommentSaga","userSaga","action","call","responseBody","put","request","message","all","takeLatest","root","fork","Users","INITIAL_STATE","isUserFetchSuccess","isUserFetchErrored","arePostsFetchSuccess","arePostsFetchErrored","isPostDetailsFetchSuccess","isPostDetailsFetchErrored","areCommentsFetchSuccess","areCommentsFetchErrored","deleteCommentFetchLoading","deleteCommentFetchErrored","reducer","combineReducers","createHistory","initialState","sagaMiddleware","createSagaMiddleware","routeMiddleware","routerMiddleware","createStore","createRootReducers","compose","applyMiddleware","run","sagas","buildStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a621dca2.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nconst IssueHeader = props => {\n  return (\n    <div className=\"blogs-page-header-wrapper\">\n      <div className=\"blogs-page-header-title\">\n        {\n          window.location.hash === '/' || window.location.hash==='#/'? \n            'User  List': \n            window.location.hash.includes('post-list')? 'Blog List':'Blog Details'\n        }\n      </div>\n      <div className=\"blogs-page-header-sub-title\">{window.location.pathname.includes('post-list')? 'Search blog from a public repository of a user': null}</div>\n    </div>\n  );\n}\n\nexport default IssueHeader;\n","import {\n    GET_USER_LIST_REQUESTED,\n    GET_POST_LIST_REQUESTED,\n    GET_POST_DETAIL_REQUESTED,\n    GET_COMMENT_LIST_REQUESTED,\n    DELETE_COMMENT_REQUESTED,\n    SET_PAGE_NUMBER,\n} from './constants';\n\n\nexport function getUserList(payload) {\n    return {\n        type: GET_USER_LIST_REQUESTED,\n        payload,\n    };\n}\n\nexport function getPostList(payload) {\n    return {\n        type: GET_POST_LIST_REQUESTED,\n        payload,\n    };\n}\n\nexport function getPostDetails(payload) {\n    return {\n        type: GET_POST_DETAIL_REQUESTED,\n        payload,\n    };\n}\n\nexport function getCommentList(payload) {\n    return {\n        type: GET_COMMENT_LIST_REQUESTED,\n        payload,\n    };\n}\n\nexport function deleteComment(payload) {\n    return {\n        type: DELETE_COMMENT_REQUESTED,\n        payload,\n    };\n}\n\nexport function setPageNumber(payload) {\n    return {\n        type: SET_PAGE_NUMBER,\n        payload,\n    }\n}","export const GET_USER_LIST_REQUESTED = 'api/GET_USER_LIST_REQUESTED';\nexport const GET_USER_LIST_SUCCESS = 'api/GET_USER_LIST_SUCCESS';\nexport const GET_USER_LIST_ERRORED = 'api/GET_USER_LIST_ERRORED';\nexport const GET_POST_LIST_REQUESTED = 'api/GET_POST_LIST_REQUESTED';\nexport const GET_POST_LIST_SUCCESS = 'api/GET_POST_LIST_SUCCESS';\nexport const GET_POST_LIST_ERRORED = 'api/GET_POST_LIST_ERRORED';\nexport const GET_POST_DETAIL_REQUESTED = 'api/GET_POST_DETAIL_REQUESTED';\nexport const GET_POST_DETAIL_SUCCESS = 'api/GET_POST_DETAIL_SUCCESS';\nexport const GET_POST_DETAIL_ERRORED = 'api/GET_POST_DETAIL_ERRORED';\nexport const GET_COMMENT_LIST_REQUESTED = 'api/GET_COMMENT_LIST_REQUESTED';\nexport const GET_COMMENT_LIST_SUCCESS = 'api/GET_COMMENT_LIST_SUCCESS';\nexport const GET_COMMENT_LIST_ERRORED = 'api/GET_COMMENT_LIST_ERRORED';\nexport const DELETE_COMMENT_REQUESTED = 'api/DELETE_COMMENT_REQUESTED';\nexport const DELETE_COMMENT_SUCCESS = 'api/DELETE_COMMENT_SUCCESS';\nexport const DELETE_COMMENT_ERRORED = 'api/DELETE_COMMENT_ERRORED';\nexport const SET_PAGE_NUMBER = 'api/SET_PAGE_NUMBER';","function isObject(object) {\n  return object != null && typeof object === 'object';\n}\n\nexport function objectComparison(object1, object2) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n    const areObjects = isObject(val1) && isObject(val2);\n    if ((areObjects && !objectComparison(val1, val2)) || (!areObjects && val1 !== val2)) return false;\n  }\n\n  return true;\n}\n\nexport function arrayComparison(arr1, arr2) {\n  return Array.isArray(arr1) && Array.isArray(arr2) && arr1.length === arr2.length && arr1.every((val, index) => val === arr2[index]);\n}\n","import React from 'react';\nimport { Table, Empty, Skeleton } from 'antd';\nimport './style.css';\n\nconst TableDetails = props => (\n  <div className=\"issue-table-container\">\n    {props.loading?\n      <Skeleton \n        loading={true}\n        active\n      />\n      : props.dataSource.length === 0?\n        <Empty \n          className=\"table-empty-image\"\n          description={'No Issues Available'}\n        />\n        : <Table \n          {...props}\n          dataSource={props.dataSource}\n          columns={props.columns}\n          pagination={props.pagination}\n        />}\n  </div>\n);\n\nexport default TableDetails;\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from 'redux';\nimport * as UserActions from '../../store/Users/actions';\nimport { arrayComparison } from '../../utils/comparisonModule';\nimport TableDetails from '../../component/TableDetails';\nimport './style.css';\n\nclass PostPage extends React.PureComponent {\n  constructor (props) {\n    super(props);\n    this.state = {\n      posts: [],\n    };\n  }\n\n  componentDidMount () {\n    this.props.UserActions.getPostList({ userId: this.props.match.params.userId, skip: 0, reset: true });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!arrayComparison(prevProps.userReducer.posts, this.props.userReducer.posts) && this.props.userReducer.posts.length>0) {\n      this.setState({ \n        posts: this.props.userReducer.posts \n      }, () => {\n        if (this.state.posts.length<=10*this.props.userReducer.pageNumber) this.props.UserActions.getPostList({ \n          userId: this.props.match.params.userId,\n          skip: this.state.posts.length,\n          reset: false\n        });\n      });\n    }\n  }\n  \n  render () {\n    const columns = [\n      {\n        title: 'Title',\n        dataIndex: 'title',\n        key: 'title',\n        render: (value, record) => (\n          <span\n            className='blog-name'\n            onClick={() => {\n              this.props.history.push(`/post-detail/${this.props.match.params.userId}/${record.id}`);\n            }}\n          >\n            {record.title}\n          </span>\n        ),\n      },\n      {\n        title: 'Body',\n        dataIndex: 'body',\n        key: 'body',\n      }\n    ];\n    return (\n      <TableDetails \n        columns={columns}\n        loading={this.props.userReducer.arePostsFetchLoading}\n        dataSource={this.state.posts}\n        onChange={this.onHandleChangeTable}\n        pagination={{  \n          position:  ['bottomCenter'],\n          defaultPageSize: 10,\n          current: this.props.userReducer.pageNumber,\n          showSizeChanger: false,\n        }}\n      />\n    );\n  }\n\n  onHandleChangeTable = (pagination, filters, sorter) => {\n    if (Object.keys(pagination).length>0) {\n      this.props.UserActions.setPageNumber(pagination.current);\n      if (10*pagination.current ===this.state.posts.length) this.props.UserActions.getPostList({ userId: this.props.match.params.userId, skip: this.state.posts.length, reset: false });\n    };\n  }\n}\n\nconst mapStateToProps = ( store ) => ({\n    userReducer: store.userReducer,\n});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n      UserActions: bindActionCreators(UserActions, dispatch),\n    }\n}\n\nexport default  connect(mapStateToProps, mapDispatchToProps)(PostPage);\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from 'redux';\nimport * as UserActions from '../../store/Users/actions';\nimport TableDetails from '../../component/TableDetails';\nimport './style.css';\n\nclass HomePage extends React.PureComponent {\n  constructor (props) {\n    super(props);\n    this.state = {\n      users: [],\n    };\n  }\n\n  componentDidMount () {\n    this.props.UserActions.getUserList();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (JSON.stringify(prevProps.userReducer.users) !== JSON.stringify(this.props.userReducer.users)) {\n      this.setState({ users: this.props.userReducer.users });\n    }\n  }\n  \n  render () {\n    const columns = [{\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n    }, {\n      title: 'Company Name',\n      key: 'company-name',\n      render: (value, record) => (\n        <div>\n          <div>{record.company.name}</div>\n        </div>\n      ),\n    }, {\n      title: '',\n      dataIndex: 'link',\n      key: 'name',\n      render: (value, record) => (\n        <div\n          className='blog-link'\n          onClick={() => {\n            this.props.history.push(`/post-list/${record.id}`);\n          }}\n        >\n          Blog Posts...\n        </div>\n      ),\n    }];\n\n    return (\n      <TableDetails \n        columns={columns}\n        dataSource={this.state.users}\n        loading={this.props.userReducer.isUserFetchLoading}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ( store ) => ({\n    userReducer: store.userReducer,\n});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n      UserActions: bindActionCreators(UserActions, dispatch),\n    }\n}\n\nexport default  connect(mapStateToProps, mapDispatchToProps)(HomePage);\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from 'redux';\nimport { Skeleton, Button } from 'antd';\nimport * as UserActions from '../../store/Users/actions';\nimport { objectComparison, arrayComparison } from '../../utils/comparisonModule';\nimport './style.css';\n\nclass PostDetails extends React.PureComponent {\n  constructor (props) {\n    super(props);\n    this.state = {\n        post:{},\n        comments: [],\n    };\n  }\n\n    componentDidMount() {\n        this.props.UserActions.getPostDetails({ postId: this.props.match.params.postId });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!objectComparison(prevProps.userReducer.postDetails, this.props.userReducer.postDetails)) {\n            this.setState({ post: this.props.userReducer.postDetails });\n        }\n\n        if (!arrayComparison(prevProps.userReducer.comments, this.props.userReducer.comments)) {\n            this.setState({ comments: this.props.userReducer.comments });\n        }\n\n        if (!prevProps.userReducer.deleteCommentFetchSuccess && this.props.userReducer.deleteCommentFetchSuccess) {\n            this.props.history.push(`/post-list/${this.props.match.params.userId}`);\n        }\n    }\n  \n    render () {\n        return (\n            this.props.userReducer.isPostDetailsFetchLoading?\n                <Skeleton \n                    className=\"details-skeleton\"\n                    loading={true}\n                    active\n                />\n                : <div className='post-detail-container'>\n                    <div style={{display: 'flex'}}>\n                        <div className='comment-title'>{this.state.post.title}</div>\n                        <Button \n                            type=\"text\"\n                            className='comment-delete-button'\n                            onClick={() => {\n                                this.props.UserActions.deleteComment({ postId: this.props.match.params.postId });\n                            }}\n                            danger\n                        >\n                            DELETE POST\n                        </Button>\n                    </div>\n                    <div className='comment-body'>{this.state.post.body}</div>\n                    {this.props.userReducer.areCommentsFetchLoading? \n                        <Skeleton \n                            className=\"details-skeleton\"\n                            loading={true}\n                            active\n                        />\n                        :  this.state.comments.length>0?\n                                this.state.comments.map(comment => {\n                                    return  <div className='comment-container'>\n                                        <div className='comment-name'>{comment.name}</div>\n                                        <div className='comment-email'>{comment.email}</div>\n                                        <div className='comment-body'>{comment.body}</div>\n                                    </div>\n                                })\n                                : <div\n                                    className='show-more-link'\n                                    onClick={() =>{\n                                        this.props.UserActions.getCommentList({ postId: this.props.match.params.postId });\n                                    }}\n                                >\n                                    Show comments...\n                                </div>\n                    }\n                </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = ( store ) => ({\n    userReducer: store.userReducer,\n});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n      UserActions: bindActionCreators(UserActions, dispatch),\n    }\n}\n\nexport default  connect(mapStateToProps, mapDispatchToProps)(PostDetails);\n","import React from 'react'\nimport { Route, Switch, HashRouter } from 'react-router-dom';\nimport IssueHeader from './component/Header/index';\nimport PostPage from './container/PostPage/index';\nimport HomePage from './container/HomePage/index';\nimport PostDetails from './container/PostDetails/index';\n\nconst Routing = props => (\n  <div>\n    <IssueHeader />\n    <HashRouter basename='/'>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route exact path=\"/post-list/:userId\" component={PostPage} />\n        <Route exact path=\"/post-detail/:userId/:postId\" component={PostDetails} />\n        <Route exact path=\"*\" component={HomePage} />\n      </Switch>\n    </HashRouter>\n  </div>\n)\n\nexport default Routing;\n","import axios from 'axios';\n\nconst instance = axios.create({\n\tbaseURL: 'https://jsonplaceholder.typicode.com/',\n\theaders: {\n\t\t'Content-Type': 'application/json',\n\t},\n});\n\nexport { instance as default };","import axios from '../utils/axios';\n\nexport async function getUserList(params) {\n  const url = `/users`;\n  const response = await axios.get(url, {});\n  const isSuccess = response.status >=200 && response.status < 300;\n  if (isSuccess) {\n    return response.data;\n  }\n  throw response.status;\n}\n\nexport async function getPostList(params) {\n  const url = `/posts/?userId=${params.userId}&skip=${params.skip}&limit=${10}`;\n  const response = await axios.get(url, {});\n  const isSuccess = response.status >=200 && response.status < 300;\n  if (isSuccess) {\n    return Array.isArray(response.data)? response.data: [response.data];\n  }\n  throw response.status;\n}\n\nexport async function getPostDetails(params) {\n  const url = `/posts/${params.postId}`;\n  const response = await axios.get(url, {});\n  const isSuccess = response.status >=200 && response.status < 300;\n  if (isSuccess) {\n    return response.data;\n  }\n  throw response.status;\n}\n\nexport async function getCommentList(params) {\n  const url = `/posts/${params.postId}/comments`;\n  const response = await axios.get(url, {});\n  const isSuccess = response.status >=200 && response.status < 300;\n  if (isSuccess) {\n    return Array.isArray(response.data)? response.data: [response.data];\n  }\n  throw response.status;\n}\n\nexport async function deleteComment(params) {\n  const url = `/posts/${params.postId}`;\n  const response = await axios.delete(url, {});\n  const isSuccess = response.status >=200 && response.status < 300;\n  if (isSuccess) {\n    return response.data;\n  }\n  throw response.status;\n}\n","import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { \n    GET_USER_LIST_REQUESTED,\n    GET_USER_LIST_SUCCESS,\n    GET_USER_LIST_ERRORED,\n    GET_POST_LIST_REQUESTED,\n    GET_POST_LIST_SUCCESS,\n    GET_POST_LIST_ERRORED,\n    GET_POST_DETAIL_REQUESTED,\n    GET_POST_DETAIL_SUCCESS,\n    GET_POST_DETAIL_ERRORED,\n    GET_COMMENT_LIST_REQUESTED,\n    GET_COMMENT_LIST_SUCCESS,\n    GET_COMMENT_LIST_ERRORED,\n    DELETE_COMMENT_REQUESTED,\n    DELETE_COMMENT_SUCCESS,\n    DELETE_COMMENT_ERRORED,\n} from './constants';\nimport {\n    getUserList,\n    getPostList,\n    getPostDetails,\n    getCommentList,\n    deleteComment,\n} from '../../api/api.blogs';\n\nfunction* getUserListSaga(action) {\n    try {\n        const responseBody = yield call(getUserList, {});\n        yield put({\n            type: GET_USER_LIST_SUCCESS,\n            payload: responseBody,\n        });\n    } catch (err) {\n        const payload = {\n            status: err.request.status,\n            message: err.message,\n        }\n        yield put({\n            type: GET_USER_LIST_ERRORED,\n            payload,\n        });\n    };\n};\n\nfunction* getPostListSaga(action) {\n    try {\n        const responseBody = yield call(getPostList, action.payload);\n        yield put({\n            type: GET_POST_LIST_SUCCESS,\n            payload: responseBody,\n        });\n    } catch (err) {\n        const payload = {\n            status: err.request.status,\n            message: err.message,\n        }\n        yield put({\n            type: GET_POST_LIST_ERRORED,\n            payload,\n        });\n    };\n};\n\nfunction* getPostDetailsSaga(action) {\n    try {\n        const responseBody = yield call(getPostDetails, action.payload);\n        yield put({\n            type: GET_POST_DETAIL_SUCCESS,\n            payload: responseBody,\n        });\n    } catch (err) {\n        const payload = {\n            status: err.request.status,\n            message: err.message,\n        }\n        yield put({\n            type: GET_POST_DETAIL_ERRORED,\n            payload,\n        });\n    };\n};\n\nfunction* getCommentListSaga(action) {\n    try {\n        const responseBody = yield call(getCommentList, action.payload);\n        yield put({\n            type: GET_COMMENT_LIST_SUCCESS,\n            payload: responseBody,\n        });\n    } catch (err) {\n        const payload = {\n            status: err.request.status,\n            message: err.message,\n        }\n        yield put({\n            type: GET_COMMENT_LIST_ERRORED,\n            payload,\n        });\n    };\n};\n\nfunction* deleteCommentSaga(action) {\n    try {\n        const responseBody = yield call(deleteComment, action.payload);\n        yield put({\n            type: DELETE_COMMENT_SUCCESS,\n            payload: responseBody,\n        });\n    } catch (err) {\n        const payload = {\n            status: err.request.status,\n            message: err.message,\n        }\n        yield put({\n            type: DELETE_COMMENT_ERRORED,\n            payload,\n        });\n    };\n};\n\nexport default function* userSaga() {\n    yield all([\n        takeLatest(GET_USER_LIST_REQUESTED, getUserListSaga),\n        takeLatest(GET_POST_LIST_REQUESTED, getPostListSaga),\n        takeLatest(GET_POST_DETAIL_REQUESTED, getPostDetailsSaga),\n        takeLatest(GET_COMMENT_LIST_REQUESTED, getCommentListSaga),\n        takeLatest(DELETE_COMMENT_REQUESTED, deleteCommentSaga),\n    ]);\n};","import { fork } from 'redux-saga/effects'\nimport Users from './Users/sagas';\n\nexport default function* root() {\n  yield fork(Users);\n}","import { \n    GET_USER_LIST_REQUESTED,\n    GET_USER_LIST_SUCCESS,\n    GET_USER_LIST_ERRORED,\n    GET_POST_LIST_REQUESTED,\n    GET_POST_LIST_SUCCESS,\n    GET_POST_LIST_ERRORED,\n    GET_POST_DETAIL_REQUESTED,\n    GET_POST_DETAIL_SUCCESS,\n    GET_POST_DETAIL_ERRORED,\n    GET_COMMENT_LIST_REQUESTED,\n    GET_COMMENT_LIST_SUCCESS,\n    GET_COMMENT_LIST_ERRORED,\n    DELETE_COMMENT_REQUESTED,\n    DELETE_COMMENT_SUCCESS,\n    DELETE_COMMENT_ERRORED,\n    SET_PAGE_NUMBER,\n} from './constants';\n\nconst INITIAL_STATE = {\n    users: [],\n    isUserFetchLoading: false,\n    isUserFetchSuccess: false,\n    isUserFetchErrored: false,\n    posts: [],\n    arePostsFetchLoading: false,\n    arePostsFetchSuccess: false,\n    arePostsFetchErrored: false,\n    postDetails: {},\n    isPostDetailsFetchLoading: false,\n    isPostDetailsFetchSuccess: false,\n    isPostDetailsFetchErrored: false,\n    comments: [],\n    areCommentsFetchLoading: false,\n    areCommentsFetchSuccess: false,\n    areCommentsFetchErrored: false,\n    deleteCommentFetchLoading: false,\n    deleteCommentFetchSuccess: false,\n    deleteCommentFetchErrored: false,\n    pageNumber: 1,\n};\n\nexport function reducer ( state = INITIAL_STATE, action) {\n    switch ( action.type ) {\n        case GET_USER_LIST_REQUESTED:\n            return {\n                ...state,\n                users: [],\n                isUserFetchLoading: true,\n                isUserFetchSuccess: false,\n                isUserFetchErrored: false,\n            }\n        case GET_USER_LIST_SUCCESS:\n            return {\n                ...state,\n                users: action.payload,\n                isUserFetchLoading: false,\n                isUserFetchSuccess: true,\n                isUserFetchErrored: false,\n            }\n        case GET_USER_LIST_ERRORED:\n            return {\n                ...state,\n                users: [],\n                isUserFetchLoading: false,\n                isUserFetchSuccess: false,\n                isUserFetchErrored: true,\n            }\n\n        case GET_POST_LIST_REQUESTED:\n            return {\n                ...state,\n                posts: action.payload.reset? []: state.posts,\n                arePostsFetchLoading: true,\n                arePostsFetchSuccess: false,\n                arePostsFetchErrored: false,\n            }\n        case GET_POST_LIST_SUCCESS:\n            return {\n                ...state,\n                posts: [ ...state.posts, ...action.payload],\n                arePostsFetchLoading: false,\n                arePostsFetchSuccess: true,\n                arePostsFetchErrored: false,\n            }\n        case GET_POST_LIST_ERRORED:\n            return {\n                ...state,\n                posts: [],\n                arePostsFetchLoading: false,\n                arePostsFetchSuccess: false,\n                arePostsFetchErrored: true,\n            }\n\n        case GET_POST_DETAIL_REQUESTED:\n            return {\n                ...state,\n                postDetails: {},\n                isPostDetailsFetchLoading: true,\n                isPostDetailsFetchSuccess: false,\n                isPostDetailsFetchErrored: false,\n            }\n        case GET_POST_DETAIL_SUCCESS:\n            return {\n                ...state,\n                postDetails: action.payload,\n                isPostDetailsFetchLoading: false,\n                isPostDetailsFetchSuccess: true,\n                isPostDetailsFetchErrored: false,\n            }\n        case GET_POST_DETAIL_ERRORED:\n            return {\n                ...state,\n                postDetails: {},\n                isPostDetailsFetchLoading: false,\n                isPostDetailsFetchSuccess: false,\n                isPostDetailsFetchErrored: true,\n            }\n\n        case GET_COMMENT_LIST_REQUESTED:\n            return {\n                ...state,\n                comments: [],\n                areCommentsFetchLoading: true,\n                areCommentsFetchSuccess: false,\n                areCommentsFetchErrored: false,\n            }\n        case GET_COMMENT_LIST_SUCCESS:\n            return {\n                ...state,\n                comments: action.payload,\n                areCommentsFetchLoading: false,\n                areCommentsFetchSuccess: true,\n                areCommentsFetchErrored: false,\n            }\n        case GET_COMMENT_LIST_ERRORED:\n            return {\n                ...state,\n                comments: [],\n                areCommentsFetchLoading: false,\n                areCommentsFetchSuccess: false,\n                areCommentsFetchErrored: true,\n            }\n\n        case DELETE_COMMENT_REQUESTED:\n            return {\n                ...state,\n                deleteCommentFetchLoading: true,\n                deleteCommentFetchSuccess: false,\n                deleteCommentFetchErrored: false,\n            }\n        case DELETE_COMMENT_SUCCESS:\n            return {\n                ...state,\n                deleteCommentFetchLoading: false,\n                deleteCommentFetchSuccess: true,\n                deleteCommentFetchErrored: false,\n            }\n        case DELETE_COMMENT_ERRORED:\n            return {\n                ...state,\n                deleteCommentFetchLoading: false,\n                deleteCommentFetchSuccess: false,\n                deleteCommentFetchErrored: true,\n            }\n\n        case SET_PAGE_NUMBER:\n            return {\n                ...state,\n                pageNumber: action.payload,\n            }\n\n        default: {\n            return {\n                ...state\n            }\n        }\n\n    };\n};","import { reducer as userReducer } from \"./Users/reducers\";\nimport { combineReducers } from 'redux';\n\nexport default (history) => combineReducers({\n  userReducer: userReducer,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './router';\n// import * as serviceWorker from './serviceWorker';\nimport { ConnectedRouter } from 'react-router-redux';\nimport { Provider } from 'react-redux';\nimport createHistory from 'history/createBrowserHistory';\nimport { buildStore } from \"./store\";\n\nconst history = createHistory();\nconst store = buildStore(history, {});\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <Router />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// serviceWorker.unregister();\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport { routerMiddleware } from 'react-router-redux';\nimport createSagaMiddleware from \"redux-saga\";\nimport sagas from './sagas';\nimport createRootReducers from './reducers';\n\nexport const buildStore = ( history, initialState = {} ) => {\n\tconst sagaMiddleware = createSagaMiddleware(initialState = {});\n \tconst routeMiddleware = routerMiddleware(history);\n \t\n \tconst store = createStore(\n   \t\tcreateRootReducers(history),\n   \t\tinitialState,\n   \t\tcompose( \n    \t\tapplyMiddleware(sagaMiddleware, routeMiddleware)\n   \t\t)\n \t);\n\n \tsagaMiddleware.run(sagas);\n \treturn store;\n}"],"sourceRoot":""}